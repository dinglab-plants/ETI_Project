tab_style(
style = cell_text(size = px(8)),
locations = list(cells_body(), cells_column_labels(), cells_stub(), cells_stubhead(), cells_row_groups())
) %>%
tab_options(
table.margin.right = px(20) # Adds 20px of space to the right side
)
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1 = data_color(table_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1_1 = data_color(table_1_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
my_tables = list(table_1, table_1_1)
gt_two_column_layout(my_tables)
gt_two_column_layout(my_tables, output = "save",
filename = "basic-two-col3.png", vwidth = 670, vheight = 620)
# colfunc = colorRampPalette(c("#5c6cfa","#d5d7ed", "#f5bd73", "#f5a573" ))
# table_1_2 = data_color(table_1,
#   columns = everything(),
#   rows = everything(),
#   method = c("numeric"),
#   bins = 4,
#   quantiles = 20,
#   direction = "row",
#   palette = colfunc(4))
#gtsave(table_1_2, "table_1_2.html")
# Downregulated Clusters: 1, 2, 4, 10
cluster_01 = read.csv2(file = "./Data/GO for clusters/Cluster1_gProfiler_athaliana_07-01-2025_15-14-23__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_02 = read.csv2(file = "./Data/GO for clusters/Cluster2_gProfiler_athaliana_07-01-2025_15-19-19__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_04 = read.csv2(file = "./Data/GO for clusters/Cluster4_gProfiler_athaliana_07-01-2025_15-21-37__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_10 = read.csv2(file = "./Data/GO for clusters/Cluster10_gProfiler_athaliana_07-01-2025_15-24-58__intersections.csv", sep = ",", dec = ".",
header = TRUE)
string_transpose = function(cluster, term){
representative = str_split_1(cluster$intersections[cluster$term_name == term], ",")
representative = setNames(representative, rep(term, length(representative)))
return(representative)
}
representative1 = str_split_1(cluster_01$intersections[cluster_01$term_name == "response to abscisic acid"], ",")
representative1 = setNames(representative1, rep("response to abscisic acid", length(representative1)))
representative4 = string_transpose(cluster_02, "response to gibberellin")
representative5 = string_transpose(cluster_02, "carbohydrate metabolic process")
representative6 = string_transpose(cluster_02, "regulation of plant organ morphogenesis")
representative3 = string_transpose(cluster_02, "response to auxin")
representative2 = str_split_1(cluster_04$intersections[cluster_04$term_name == "photomorphogenesis"], ",")
representative2 = setNames(representative2, rep("photomorphogenesis", length(representative2)))
representative7 = string_transpose(cluster_10, "photosynthesis")
representative8 = string_transpose(cluster_10, "leaf development")
representative9 = string_transpose(cluster_10, "regulation of lateral root development")
gene_id = c(representative1, representative2, representative3, representative4, representative5, representative6, representative7, representative8, representative9)
gene_terms = c(names(representative1), names(representative2), names(representative3), names(representative4), names(representative5), names(representative6), names(representative7), names(representative8), names(representative9))
representative_genes = data.frame(Gene_ID = gene_id , term_name = gene_terms)
representative_genes = cbind(representative_genes, full_gene_list[match(representative_genes$Gene_ID, row.names(full_gene_list)), c("SETI_WT.E.SETI_WT.mock", "SETI_p.E.SETI_p.mock", "SETI_s.E.SETI_s.mock", "SETI_ps.E.SETI_ps.mock")])
colnames(representative_genes)[3:6] = c("SETI", "PAD4", "SAG101", "PAD4_SAG101")
fig_table = representative_genes[,c("Gene_ID", "SETI", "PAD4", "SAG101", "PAD4_SAG101")]
fig_table = fig_table[!duplicated(fig_table$Gene_ID),]
#fig_table = fig_table[((fig_table$SETI < fig_table$PAD4) & (fig_table$SAG101 < fig_table$PAD4)) |
#                        ((fig_table$SETI > fig_table$PAD4) & (fig_table$SAG101 > fig_table$PAD4)),]
fig_table = fig_table[((fig_table$SETI < fig_table$PAD4) & (fig_table$SAG101 < fig_table$PAD4)),]
fig_table$SETI = round(fig_table$SETI, 3)
fig_table$PAD4 = round(fig_table$PAD4, 3)
fig_table$SAG101 = round(fig_table$SAG101, 3)
fig_table$PAD4_SAG101 = round(fig_table$PAD4_SAG101, 3)
fig_table = fig_table[order(fig_table$PAD4),]
# Remove some genes and reduce list size
fig_table1 = na.omit(fig_table[fig_table$Gene_ID %in% c(representative2,representative7,representative8,representative4[1:11], representative9),])
group2 = c(representative1[-13],representative5[1:12],representative3,representative6) #[c(representative1,representative5,representative3,representative6)]
fig_table1_1 = na.omit(fig_table[fig_table$Gene_ID %in% group2,])
table_1 = gt(fig_table1, rowname_col = "Gene_ID")|>
tab_row_group(
label = "Response to gibberellin",
rows = representative4[1:11][representative4[1:11] %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Photosynthesis",
rows = representative7[representative7 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Leaf development",
rows = representative8[representative8 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Photomorphogenesis",
rows = representative2[representative2 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Regulation of lateral root development",
rows = representative9[representative9 %in% fig_table$Gene_ID]
) |>
tab_stubhead(label = "Gene ID")  |>
cols_label(
Gene_ID = "Gene ID",
SETI = md("SETI"),
SAG101 = md("SETI *sag101*"),
PAD4 = md("SETI *pad4*"),
PAD4_SAG101 = md("SETI *pad4 sag101*")
) |>
tab_style(
style = cell_fill(color = "#d4d2d2"),  # Set the background color to grey
locations = list(
cells_column_labels(),
cells_row_groups(),
cells_stub(),
cells_stubhead(),
cells_column_spanners()
)     # Target the row groups
)
table_1_1 = gt(fig_table1_1, rowname_col = "Gene_ID")|>
tab_row_group(
label = "Response to abscisic acid",
rows = representative1[-13][representative1[-13] %in% fig_table$Gene_ID],
) |>
tab_row_group(
label = "Response to auxin",
rows = representative3[(representative3 %in% fig_table$Gene_ID)]
) |>
tab_row_group(
label = "Carbohydrate metabolic process",
rows = representative5[1:12][representative5[1:12] %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Regulation of plant organ morphogenesis",
rows = representative6[representative6 %in% fig_table$Gene_ID]
) |>
tab_stubhead(label = "Gene ID")  |>
cols_label(
Gene_ID = "Gene ID",
SETI = md("SETI"),
SAG101 = md("SETI *sag101*"),
PAD4 = md("SETI *pad4*"),
PAD4_SAG101 = md("SETI *pad4 sag101*")
) |>
tab_style(
style = cell_fill(color = "#d4d2d2"),  # Set the background color to grey
locations = list(
cells_column_labels(),
cells_row_groups(),
cells_stub(),
cells_stubhead(),
cells_column_spanners()
)     # Target the row groups
)
table_1 = tab_style(table_1,
style = cell_text(align = "center"),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners()
)
)
table_1 = tab_style(table_1,
style = cell_text(align = "center", v_align = "middle"),
locations = cells_column_labels()
) |>
tab_style(
style = cell_text(align = "center", v_align = "middle"),
locations = cells_stubhead()
) |>
tab_style(
style = cell_borders(
sides = "all", # Add borders to all sides
color = "black", # Border color
weight = px(1)   # Border thickness
),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners(),
cells_source_notes(),
cells_footnotes(),
cells_title()
)
) |>
cols_width(
everything() ~ px(60)  # Set all columns to 100 pixels wide
) |>
gt::tab_options(
column_labels.border.bottom.width = px(1), # Fix column label and spanner bottom border
column_labels.border.top.width = px(1), # Fix column label top border
table.border.bottom.width = px(1), # Fix table bottom border
table.border.top.width = px(1), # Fix table top border
table_body.border.top.width = px(1), # Fix body top border
table_body.border.bottom.width = px(1) # Fix body bottom border
) |>
tab_style(
style = cell_borders(sides = "all", color = "black", weight = px(1)),
locations = list(cells_column_labels(everything()),
cells_stubhead())
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = list(cells_column_labels(),
cells_stubhead(),
cells_row_groups(),
cells_body(columns = "Gene_ID"),
cells_stub())
) %>%
tab_style(
style = cell_text(size = px(8)),
locations = list(cells_body(), cells_column_labels(), cells_stub(), cells_stubhead(), cells_row_groups())
)
table_1_1 = tab_style(table_1_1,
style = cell_text(align = "center"),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners()
)
)
table_1_1 = tab_style(table_1_1,
style = cell_text(align = "center", v_align = "middle"),
locations = cells_column_labels()
) |>
tab_style(
style = cell_text(align = "center", v_align = "middle"),
locations = cells_stubhead()
) |>
tab_style(
style = cell_borders(
sides = "all", # Add borders to all sides
color = "black", # Border color
weight = px(1)   # Border thickness
),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners(),
cells_source_notes(),
cells_footnotes(),
cells_title()
)
) |>
cols_width(
everything() ~ px(60)  # Set all columns to 100 pixels wide
)  |>
gt::tab_options(
column_labels.border.bottom.width = px(1), # Fix column label and spanner bottom border
column_labels.border.top.width = px(1), # Fix column label top border
table.border.bottom.width = px(1), # Fix table bottom border
table.border.top.width = px(1), # Fix table top border
table_body.border.top.width = px(1), # Fix body top border
table_body.border.bottom.width = px(1) # Fix body bottom border
) %>%
tab_style(
style = cell_borders(sides = "all", color = "black", style = "solid", weight = px(1)),
locations = list(cells_column_labels(everything()),
cells_stubhead())
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = list(cells_column_labels(),
cells_stubhead(),
cells_row_groups(),
cells_body(columns = "Gene_ID"),
cells_stub())
) %>%
tab_style(
style = cell_text(size = px(8)),
locations = list(cells_body(), cells_column_labels(), cells_stub(), cells_stubhead(), cells_row_groups())
) %>%
tab_options(
table.margin.right = px(20) # Adds 20px of space to the right side
)
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1 = data_color(table_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1_1 = data_color(table_1_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
my_tables = list(table_1, table_1_1)
gt_two_column_layout(my_tables)
gt_two_column_layout(my_tables, output = "save",
filename = "basic-two-col3.png", vwidth = 670, vheight = 620)
# colfunc = colorRampPalette(c("#5c6cfa","#d5d7ed", "#f5bd73", "#f5a573" ))
# table_1_2 = data_color(table_1,
#   columns = everything(),
#   rows = everything(),
#   method = c("numeric"),
#   bins = 4,
#   quantiles = 20,
#   direction = "row",
#   palette = colfunc(4))
#gtsave(table_1_2, "table_1_2.html")
knitr::opts_chunk$set(echo = TRUE)
library("ComplexHeatmap")
library("circlize")
library("ggpubr")
library("stringr")
knitr::opts_chunk$set(echo = TRUE)
selected_genes = read.csv2("./Data/selected_DEGs.csv", dec = ".")
cluster_genes = read.csv2("./Data/Target in each cluster heatmap 5067 DE genes.csv", dec = ".", sep = ",")
selected_genes$cluster = cluster_genes$Clusters[match(selected_genes$Gene_id, cluster_genes$Targets)]
selected_genes$cluster = factor(selected_genes$cluster)
gene_list = read.csv2(file = "./Data/Significant DE genes list and statistics.csv", sep = ",", dec = ".",
header = TRUE)
gene_list = gene_list[gene_list$contrast != "SETI_p.E-SETI_s.E" & gene_list$contrast != "SETI_p.E-SETI_WT.E"
& gene_list$contrast != "SETI_s.E-SETI_WT.E", ]
gene_list$contrast = factor(gene_list$contrast)
test = selected_genes[,c(3,7,5,4,6)]
rownames(test) = paste(selected_genes$Gene_id, " ", "(",selected_genes$Gene,")", sep = "")
test2 = as.matrix(test)
col_fun = colorRamp2(c(0, 4, 8 ), c("white", "orange", "red"))
col_fun(seq(-3, 3))
selected_genes$cluster = factor(selected_genes$cluster)
plot_heatmap = Heatmap(test2, name = "Log2(Fold Change)", col_fun, split = selected_genes$cluster, rect_gp = gpar(col = "black"), row_gap = unit(1.5, "mm"), show_parent_dend_line = FALSE, row_order = order(as.numeric(gsub("row", "", rownames(test)))),
row_labels = rownames(test), row_names_gp = gpar(fontsize = 8, fontface = "italic"), show_column_names = TRUE, column_names_rot = -45, column_order = c("SETI", "eds1", "pad4", "sag101", "pad4sag101"), column_labels = c(expression("SETI_wt"), expression("SETI_" * italic("eds1")), expression("SETI_" * italic("pad4")), expression("SETI_" * italic("sag101")), expression("SETI_" * italic("pad4 sag101"))))
plot_heatmap
knitr::opts_chunk$set(echo = TRUE)
library("ComplexHeatmap")
library("circlize")
library("ggpubr")
library("stringr")
selected_genes = read.csv2("./Data/selected_DEGs.csv", dec = ".")
cluster_genes = read.csv2("./Data/Target in each cluster heatmap 5067 DE genes.csv", dec = ".", sep = ",")
selected_genes$cluster = cluster_genes$Clusters[match(selected_genes$Gene_id, cluster_genes$Targets)]
selected_genes$cluster = factor(selected_genes$cluster)
gene_list = read.csv2(file = "./Data/Significant DE genes list and statistics.csv", sep = ",", dec = ".",
header = TRUE)
gene_list = gene_list[gene_list$contrast != "SETI_p.E-SETI_s.E" & gene_list$contrast != "SETI_p.E-SETI_WT.E"
& gene_list$contrast != "SETI_s.E-SETI_WT.E", ]
gene_list$contrast = factor(gene_list$contrast)
test = selected_genes[,c(3,7,5,4,6)]
rownames(test) = paste(selected_genes$Gene_id, " ", "(",selected_genes$Gene,")", sep = "")
test2 = as.matrix(test)
col_fun = colorRamp2(c(0, 4, 8 ), c("white", "orange", "red"))
col_fun(seq(-3, 3))
selected_genes$cluster = factor(selected_genes$cluster)
plot_heatmap = Heatmap(test2, name = "Log2(Fold Change)", col_fun, split = selected_genes$cluster, rect_gp = gpar(col = "black"), row_gap = unit(1.5, "mm"), show_parent_dend_line = FALSE, row_order = order(as.numeric(gsub("row", "", rownames(test)))),
row_labels = rownames(test), row_names_gp = gpar(fontsize = 8, fontface = "italic"), show_column_names = TRUE, column_names_rot = -45, column_order = c("SETI", "eds1", "pad4", "sag101", "pad4sag101"), column_labels = c(expression("SETI_wt"), expression("SETI_" * italic("eds1")), expression("SETI_" * italic("pad4")), expression("SETI_" * italic("sag101")), expression("SETI_" * italic("pad4 sag101"))))
plot_heatmap
View(cluster_genes)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library("ComplexHeatmap")
library("circlize")
library("ggpubr")
library("stringr")
selected_genes = read.csv2("./Data/selected_DEGs.csv", dec = ".")
cluster_genes = read.csv2("./Data/Target in each cluster heatmap 5067 DE genes.csv", dec = ".", sep = ",")
selected_genes$cluster = cluster_genes$Clusters[match(selected_genes$Gene_id, cluster_genes$Targets)]
selected_genes$cluster = factor(selected_genes$cluster)
gene_list = read.csv2(file = "./Data/Significant DE genes list and statistics.csv", sep = ",", dec = ".",
header = TRUE)
gene_list = gene_list[gene_list$contrast != "SETI_p.E-SETI_s.E" & gene_list$contrast != "SETI_p.E-SETI_WT.E"
& gene_list$contrast != "SETI_s.E-SETI_WT.E", ]
gene_list$contrast = factor(gene_list$contrast)
test = selected_genes[,c(3,7,5,4,6)]
rownames(test) = paste(selected_genes$Gene_id, " ", "(",selected_genes$Gene,")", sep = "")
test2 = as.matrix(test)
col_fun = colorRamp2(c(0, 4, 8 ), c("white", "orange", "red"))
col_fun(seq(-3, 3))
selected_genes$cluster = factor(selected_genes$cluster)
plot_heatmap = Heatmap(test2, name = "Log2(Fold Change)", col_fun, split = selected_genes$cluster, rect_gp = gpar(col = "black"), row_gap = unit(1.5, "mm"), show_parent_dend_line = FALSE, row_order = order(as.numeric(gsub("row", "", rownames(test)))),
row_labels = rownames(test), row_names_gp = gpar(fontsize = 8, fontface = "italic"), show_column_names = TRUE, column_names_rot = -45, column_order = c("SETI", "eds1", "pad4", "sag101", "pad4sag101"), column_labels = c(expression("SETI_wt"), expression("SETI_" * italic("eds1")), expression("SETI_" * italic("pad4")), expression("SETI_" * italic("sag101")), expression("SETI_" * italic("pad4 sag101"))))
plot_heatmap
pdf(file="heatmap.pdf",
width = 8,
height = 6.5)
plot_heatmap
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library("ComplexUpset")
library("ggpubr")
library("stringr")
library("r2r")
library("gt")
library("gtExtras")
library("ComplexUpset")
library("tibble")
library("tidyr")
gene_list = read.csv2(file = "./Data/Downregulated_ETI/Significant DE genes list and statistics.csv", sep = ",", dec = ".",
header = TRUE)
gene_list = gene_list[gene_list$contrast != "SETI_p.E-SETI_s.E" & gene_list$contrast != "SETI_p.E-SETI_WT.E"
& gene_list$contrast != "SETI_s.E-SETI_WT.E", ]
gene_list$contrast = factor(gene_list$contrast)
full_gene_list = read.csv("./Data/Downregulated_ETI/Full_geneslist_logF2.csv", sep = ";", dec = ".", header = TRUE, row.names = 1)
downregulated = gene_list[gene_list$up.down == "down-regulated", ]
View(downregulated)
upregulated = gene_list[gene_list$up.down == "up-regulated", ]
downregulated = gene_list[gene_list$up.down == "down-regulated", ]
line_treatment = c("SETI_WT.E-SETI_WT.mock", "SETI_p.E-SETI_p.mock", "SETI_s.E-SETI_s.mock", "SETI_ps.E-SETI_ps.mock", "SETI_e.E-SETI_e.mock")
line_treatment_list = list("SETI_WT.E-SETI_WT.mock" = NULL, "SETI_p.E-SETI_p.mock" =  NULL, "SETI_s.E-SETI_s.mock" =  NULL, "SETI_ps.E-SETI_ps.mock" =  NULL,  "SETI_e.E-SETI_e.mock" =  NULL)
downregulated_list = upset_plot_reorder(downregulated, line_treatment, line_treatment_list)
upset_plot_reorder = function(data_list, line_treatment, line_treatment_list){
for (gene_id in data_list$target) {
for (lines in line_treatment) {
if(lines %in% data_list[data_list$target == gene_id, "contrast"]){
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],1)
}else{
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],0)
}
}
}
return(line_treatment_list)
}
outersect <- function(x, y) {
sort(c(setdiff(x, y),
setdiff(y, x)))
}
gene_list = read.csv2(file = "./Data/Downregulated_ETI/Significant DE genes list and statistics.csv", sep = ",", dec = ".",
header = TRUE)
gene_list = gene_list[gene_list$contrast != "SETI_p.E-SETI_s.E" & gene_list$contrast != "SETI_p.E-SETI_WT.E"
& gene_list$contrast != "SETI_s.E-SETI_WT.E", ]
gene_list$contrast = factor(gene_list$contrast)
full_gene_list = read.csv("./Data/Downregulated_ETI/Full_geneslist_logF2.csv", sep = ";", dec = ".", header = TRUE, row.names = 1)
upregulated = gene_list[gene_list$up.down == "up-regulated", ]
downregulated = gene_list[gene_list$up.down == "down-regulated", ]
line_treatment = c("SETI_WT.E-SETI_WT.mock", "SETI_p.E-SETI_p.mock", "SETI_s.E-SETI_s.mock", "SETI_ps.E-SETI_ps.mock", "SETI_e.E-SETI_e.mock")
line_treatment_list = list("SETI_WT.E-SETI_WT.mock" = NULL, "SETI_p.E-SETI_p.mock" =  NULL, "SETI_s.E-SETI_s.mock" =  NULL, "SETI_ps.E-SETI_ps.mock" =  NULL,  "SETI_e.E-SETI_e.mock" =  NULL)
downregulated_list = upset_plot_reorder(downregulated, line_treatment, line_treatment_list)
upset_plot_down = data.frame(genes = downregulated$target, SETI = downregulated_list[["SETI_WT.E-SETI_WT.mock"]], PAD4 = downregulated_list[["SETI_p.E-SETI_p.mock"]], SAG101 = downregulated_list[["SETI_s.E-SETI_s.mock"]], PAD4SAG101 = downregulated_list[["SETI_ps.E-SETI_ps.mock"]],
EDS1 = downregulated_list[["SETI_e.E-SETI_e.mock"]])
upset_plot_down = upset_plot_down[!duplicated(upset_plot_down$genes),]
write.csv2(downregulated[downregulated$contrast == "SETI_WT.E-SETI_WT.mock",], file = "SETI_downregulated")
upset(upset_plot_down, colnames(upset_plot_down)[2:6])
var.lab3 = c(
"SETI" = bquote(bold("SETI wt")),
"PAD4" = expression(bold("SETI") ~ bolditalic("pad4")),
"SAG101" = expression(bold("SETI") ~ bolditalic("sag101")),
"PAD4SAG101" = expression(bold("SETI") ~ bolditalic("pad4 sag101")),
"EDS1" = expression(bold("SETI") ~ bolditalic("eds1")))[sort(1:5, decreasing = TRUE)]
vlabeller <- function (variable, value) {
return(var.lab3[value])
}
upset_plot_down = upset_plot_down[,c(1, sort(2:6, decreasing = TRUE))]
upset_up_plot = upset(upset_plot_down, colnames(upset_plot_down[,2:6]), name='Lines', width_ratio=0.1, labeller= vlabeller, sort_sets=FALSE, set_sizes=FALSE, themes=upset_default_themes(text=element_text(size=8))) + ggtitle('Intersection of downregulated DEGs')
Genes = length(upset_plot_down[upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 1 & upset_plot_down$SETI == 0 & upset_plot_down$EDS1 == 0
& upset_plot_down$PAD4SAG101 == 0, "genes"])
# pdf(file="upset_plot_down.pdf",
#     width = 4,
#   height = 3.25)
# upset_up_plot
# dev.off()
my_list = list(SETI_pad4_sag101 = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 1], SETI_sag101 = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 1], sag101 = upset_plot_down$genes[upset_plot_down$SETI == 0 & upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 1], pad4 = upset_plot_down$genes[upset_plot_down$SETI == 0 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 0], pad4_sag101 = upset_plot_down$genes[upset_plot_down$SETI == 0 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 1] ,SETI = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 0], SETI_pad4 = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 0])
# Find the maximum length of the elements in the list
max_len <- max(sapply(my_list, length))
# Pad shorter elements with NA
my_list_padded <- lapply(my_list, function(x) {
length(x) <- max_len
return(x)
})
# Convert the list to a data.frame
df <- as.data.frame(my_list_padded)
# Export the data.frame as a CSV file
write.csv2(df, "upset_plot_DEGs.csv", row.names = FALSE)
upregulated = gene_list[gene_list$up.down == "up-regulated", ]
downregulated = gene_list[gene_list$up.down == "down-regulated", ]
line_treatment = c("SETI_WT.E-SETI_WT.mock", "SETI_p.E-SETI_p.mock", "SETI_s.E-SETI_s.mock", "SETI_ps.E-SETI_ps.mock", "SETI_e.E-SETI_e.mock")
line_treatment_list = list("SETI_WT.E-SETI_WT.mock" = NULL, "SETI_p.E-SETI_p.mock" =  NULL, "SETI_s.E-SETI_s.mock" =  NULL, "SETI_ps.E-SETI_ps.mock" =  NULL,  "SETI_e.E-SETI_e.mock" =  NULL)
downregulated_list = upset_plot_reorder(downregulated, line_treatment, line_treatment_list)
upset_plot_down = data.frame(genes = downregulated$target, SETI = downregulated_list[["SETI_WT.E-SETI_WT.mock"]], PAD4 = downregulated_list[["SETI_p.E-SETI_p.mock"]], SAG101 = downregulated_list[["SETI_s.E-SETI_s.mock"]], PAD4SAG101 = downregulated_list[["SETI_ps.E-SETI_ps.mock"]],
EDS1 = downregulated_list[["SETI_e.E-SETI_e.mock"]])
upset_plot_down = upset_plot_down[!duplicated(upset_plot_down$genes),]
write.csv2(downregulated[downregulated$contrast == "SETI_WT.E-SETI_WT.mock",], file = "SETI_downregulated")
upset(upset_plot_down, colnames(upset_plot_down)[2:6])
var.lab3 = c(
"SETI" = bquote(bold("SETI wt")),
"PAD4" = expression(bold("SETI") ~ bolditalic("pad4")),
"SAG101" = expression(bold("SETI") ~ bolditalic("sag101")),
"PAD4SAG101" = expression(bold("SETI") ~ bolditalic("pad4 sag101")),
"EDS1" = expression(bold("SETI") ~ bolditalic("eds1")))[sort(1:5, decreasing = TRUE)]
vlabeller <- function (variable, value) {
return(var.lab3[value])
}
upset_plot_down = upset_plot_down[,c(1, sort(2:6, decreasing = TRUE))]
upset_up_plot = upset(upset_plot_down, colnames(upset_plot_down[,2:6]), name='Lines', width_ratio=0.1, labeller= vlabeller, sort_sets=FALSE, set_sizes=FALSE, themes=upset_default_themes(text=element_text(size=8))) + ggtitle('Intersection of downregulated DEGs')
Genes = length(upset_plot_down[upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 1 & upset_plot_down$SETI == 0 & upset_plot_down$EDS1 == 0
& upset_plot_down$PAD4SAG101 == 0, "genes"])
# pdf(file="upset_plot_down.pdf",
#     width = 4,
#   height = 3.25)
# upset_up_plot
# dev.off()
my_list = list(SETI_pad4_sag101 = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 1], SETI_sag101 = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 1], sag101 = upset_plot_down$genes[upset_plot_down$SETI == 0 & upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 1], pad4 = upset_plot_down$genes[upset_plot_down$SETI == 0 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 0], pad4_sag101 = upset_plot_down$genes[upset_plot_down$SETI == 0 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 1] ,SETI = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 0 & upset_plot_down$SAG101 == 0], SETI_pad4 = upset_plot_down$genes[upset_plot_down$SETI == 1 & upset_plot_down$PAD4 == 1 & upset_plot_down$SAG101 == 0])
# Find the maximum length of the elements in the list
max_len <- max(sapply(my_list, length))
# Pad shorter elements with NA
my_list_padded <- lapply(my_list, function(x) {
length(x) <- max_len
return(x)
})
# Convert the list to a data.frame
df <- as.data.frame(my_list_padded)
# Export the data.frame as a CSV file
write.csv2(df, "upset_plot_DEGs.csv", row.names = FALSE)
