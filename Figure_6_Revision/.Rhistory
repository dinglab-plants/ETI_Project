tab_options(
column_labels.border.bottom.style = 'none',
column_labels.border.top.style = 'none',
row_group.border.top.style = 'none',
column_labels.vlines.color = 'black'
) %>%
tab_style(
style = cell_borders(sides = "all", color = "black", weight = px(2)),
locations = list(cells_column_labels(everything()),
cells_stubhead())
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = list(cells_column_labels(),
cells_stubhead(),
cells_row_groups(),
cells_body(columns = "Gene_ID"),
cells_stub())
) %>%
tab_style(
style = cell_text(size = px(8)),
locations = list(cells_body(), cells_column_labels(), cells_stub(), cells_stubhead(), cells_row_groups())
) %>%
tab_options(
table.margin.right = px(20) # Adds 20px of space to the right side
)
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1 = data_color(table_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1_1 = data_color(table_1_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
my_tables = list(table_1, table_1_1)
gt_two_column_layout(my_tables)
gt_two_column_layout(my_tables, output = "save",
filename = "basic-two-col2.png",
vwidth = 4000, vheight = 4000)
# colfunc = colorRampPalette(c("#5c6cfa","#d5d7ed", "#f5bd73", "#f5a573" ))
# table_1_2 = data_color(table_1,
#   columns = everything(),
#   rows = everything(),
#   method = c("numeric"),
#   bins = 4,
#   quantiles = 20,
#   direction = "row",
#   palette = colfunc(4))
#gtsave(table_1_2, "table_1_2.html")
gt_two_column_layout(my_tables, output = "save",
filename = "basic-two-col2.png",
vwidth = 1920, vheight = 1080)
gt_two_column_layout(my_tables, output = "save",
filename = "basic-two-col2.png")
gt_two_column_layout(my_tables)
knitr::opts_chunk$set(echo = TRUE)
library("ComplexUpset")
library("ggpubr")
library("stringr")
library("r2r")
library("gt")
library("gtExtras")
library("ComplexUpset")
library("tibble")
library("tidyr")
upset_plot_reorder = function(data_list, line_treatment, line_treatment_list){
for (gene_id in data_list$target) {
for (lines in line_treatment) {
if(lines %in% data_list[data_list$target == gene_id, "contrast"]){
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],1)
}else{
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],0)
}
}
}
return(line_treatment_list)
}
outersect <- function(x, y) {
sort(c(setdiff(x, y),
setdiff(y, x)))
}
gene_list = read.csv2(file = "./Data/Downregulated_ETI/Significant DE genes list and statistics.csv", sep = ",", dec = ".",
header = TRUE)
gene_list = gene_list[gene_list$contrast != "SETI_p.E-SETI_s.E" & gene_list$contrast != "SETI_p.E-SETI_WT.E"
& gene_list$contrast != "SETI_s.E-SETI_WT.E", ]
gene_list$contrast = factor(gene_list$contrast)
full_gene_list = read.csv("./Data/Downregulated_ETI/Full_geneslist_logF2.csv", sep = ";", dec = ".", header = TRUE, row.names = 1)
cluster_01 = read.csv2(file = "./Data/GO for clusters/cluster1_gProfiler_athaliana_11-12-2023_8-16-10 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_03 = read.csv2(file = "./Data/GO for clusters/cluster3_gProfiler_athaliana_11-12-2023_8-04-39 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_06 = read.csv2(file = "./Data/GO for clusters/cluster6_gProfiler_athaliana_11-12-2023_8-17-16 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_09 = read.csv2(file = "./Data/GO for clusters/cluster9_gProfiler_athaliana_11-12-2023_8-44-49 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
string_transpose = function(cluster, term){
representative = str_split_1(cluster$intersections[cluster$term_name == term], ",")
representative = setNames(representative, rep(term, length(representative)))
return(representative)
}
representative1 = str_split_1(cluster_01$intersections[cluster_01$term_name == "response to abscisic acid"], ",")
representative1 = setNames(representative1, rep("response to abscisic acid", length(representative1)))
representative2 = str_split_1(cluster_01$intersections[cluster_01$term_name == "auxin-activated signaling pathway"], ",")
representative2 = setNames(representative2, rep("auxin-activated signaling pathway", length(representative2)))
representative3 = string_transpose(cluster_03, "carbohydrate biosynthetic process")
representative4 = string_transpose(cluster_03, "regulation of plant organ morphogenesis")
representative5 = string_transpose(cluster_06, "response to auxin")
representative6 = string_transpose(cluster_06, "response to gibberellin")
representative7 = string_transpose(cluster_09, "photosynthesis")
representative8 = string_transpose(cluster_09, "leaf development")
gene_id = c(representative1, representative2, representative3, representative4, representative5, representative6, representative7, representative8)
gene_terms = c(names(representative1), names(representative2), names(representative3), names(representative4), names(representative5), names(representative6), names(representative7), names(representative8))
representative_genes = data.frame(Gene_ID = gene_id , term_name = gene_terms)
representative_genes = cbind(representative_genes, full_gene_list[match(representative_genes$Gene_ID, row.names(full_gene_list)), c("SETI_WT.E.SETI_WT.mock", "SETI_p.E.SETI_p.mock", "SETI_s.E.SETI_s.mock", "SETI_ps.E.SETI_ps.mock")])
colnames(representative_genes)[3:6] = c("SETI", "PAD4", "SAG101", "PAD4_SAG101")
fig_table = representative_genes[,c("Gene_ID", "SETI", "PAD4", "SAG101", "PAD4_SAG101")]
fig_table = fig_table[!duplicated(fig_table$Gene_ID),]
#fig_table = fig_table[((fig_table$SETI < fig_table$PAD4) & (fig_table$SAG101 < fig_table$PAD4)) |
#                        ((fig_table$SETI > fig_table$PAD4) & (fig_table$SAG101 > fig_table$PAD4)),]
fig_table = fig_table[((fig_table$SETI < fig_table$PAD4) & (fig_table$SAG101 < fig_table$PAD4)),]
fig_table$SETI = round(fig_table$SETI, 3)
fig_table$PAD4 = round(fig_table$PAD4, 3)
fig_table$SAG101 = round(fig_table$SAG101, 3)
fig_table$PAD4_SAG101 = round(fig_table$PAD4_SAG101, 3)
fig_table = fig_table[order(fig_table$PAD4),]
fig_table1 = na.omit(fig_table[fig_table$Gene_ID %in% c(representative6,representative7,representative8,representative2),])
group2 = c(representative1,representative5,representative3,representative4)[c(representative1,representative5,representative3,representative4) != "AT1G74840"]
fig_table1_1 = na.omit(fig_table[fig_table$Gene_ID %in% group2,])
table_1 = gt(fig_table1, rowname_col = "Gene_ID")|>
tab_row_group(
label = "Response to gibberellin",
rows = representative6[representative6 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Photosynthesis",
rows = representative7[representative7 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Leaf development",
rows = representative8[representative8 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Auxin-activated signaling pathway",
rows = representative2[representative2 %in% fig_table$Gene_ID]
) |>
tab_stubhead(label = "Gene ID")  |>
cols_label(
Gene_ID = "Gene ID",
SETI = md("SETI"),
SAG101 = md("SETI *sag101*"),
PAD4 = md("SETI *pad4*"),
PAD4_SAG101 = md("SETI *pad4 sag101*")
) |>
tab_style(
style = cell_fill(color = "#d4d2d2"),  # Set the background color to grey
locations = list(
cells_column_labels(),
cells_row_groups(),
cells_stub(),
cells_stubhead(),
cells_column_spanners()
)     # Target the row groups
)
table_1_1 = gt(fig_table1_1, rowname_col = "Gene_ID")|>
tab_row_group(
label = "Response to abscisic acid",
rows = representative1[representative1 %in% fig_table$Gene_ID],
) |>
tab_row_group(
label = "Response to auxin",
rows = representative5[(representative5 %in% fig_table$Gene_ID) & (representative5 != "AT1G74840")]
) |>
tab_row_group(
label = "Carbohydrate biosynthetic process",
rows = representative3[representative3 %in% fig_table$Gene_ID]
) |>
tab_row_group(
label = "Regulation of plant organ morphogenesis",
rows = representative4[representative4 %in% fig_table$Gene_ID]
) |>
tab_stubhead(label = "Gene ID")  |>
cols_label(
Gene_ID = "Gene ID",
SETI = md("SETI"),
SAG101 = md("SETI *sag101*"),
PAD4 = md("SETI *pad4*"),
PAD4_SAG101 = md("SETI *pad4 sag101*")
) |>
tab_style(
style = cell_fill(color = "#d4d2d2"),  # Set the background color to grey
locations = list(
cells_column_labels(),
cells_row_groups(),
cells_stub(),
cells_stubhead(),
cells_column_spanners()
)     # Target the row groups
)
table_1 = tab_style(table_1,
style = cell_text(align = "center"),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners()
)
)
table_1 = tab_style(table_1,
style = cell_text(align = "center", v_align = "middle"),
locations = cells_column_labels()
) |>
tab_style(
style = cell_text(align = "center", v_align = "middle"),
locations = cells_stubhead()
) |>
tab_style(
style = cell_borders(
sides = "all", # Add borders to all sides
color = "black", # Border color
weight = px(1)   # Border thickness
),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners(),
cells_source_notes(),
cells_footnotes(),
cells_title()
)
) |>
cols_width(
everything() ~ px(60)  # Set all columns to 100 pixels wide
) |>
gt::tab_options(
column_labels.border.bottom.width = px(1), # Fix column label and spanner bottom border
column_labels.border.top.width = px(1), # Fix column label top border
table.border.bottom.width = px(1), # Fix table bottom border
table.border.top.width = px(1), # Fix table top border
table_body.border.top.width = px(1), # Fix body top border
table_body.border.bottom.width = px(1) # Fix body bottom border
) |>
tab_style(
style = cell_borders(sides = "all", color = "black", weight = px(1)),
locations = list(cells_column_labels(everything()),
cells_stubhead())
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = list(cells_column_labels(),
cells_stubhead(),
cells_row_groups(),
cells_body(columns = "Gene_ID"),
cells_stub())
) %>%
tab_style(
style = cell_text(size = px(8)),
locations = list(cells_body(), cells_column_labels(), cells_stub(), cells_stubhead(), cells_row_groups())
)
table_1_1 = tab_style(table_1_1,
style = cell_text(align = "center"),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners()
)
)
table_1_1 = tab_style(table_1_1,
style = cell_text(align = "center", v_align = "middle"),
locations = cells_column_labels()
) |>
tab_style(
style = cell_text(align = "center", v_align = "middle"),
locations = cells_stubhead()
) |>
tab_style(
style = cell_borders(
sides = "all", # Add borders to all sides
color = "black", # Border color
weight = px(1)   # Border thickness
),
locations = list(
cells_body(),
cells_row_groups(),
cells_stub(),
cells_column_spanners(),
cells_source_notes(),
cells_footnotes(),
cells_title()
)
) |>
cols_width(
everything() ~ px(60)  # Set all columns to 100 pixels wide
)  |>
gt::tab_options(
column_labels.border.bottom.width = px(1), # Fix column label and spanner bottom border
column_labels.border.top.width = px(1), # Fix column label top border
table.border.bottom.width = px(1), # Fix table bottom border
table.border.top.width = px(1), # Fix table top border
table_body.border.top.width = px(1), # Fix body top border
table_body.border.bottom.width = px(1) # Fix body bottom border
) %>%
tab_style(
style = cell_borders(sides = "all", color = "black", style = "solid", weight = px(1)),
locations = list(cells_column_labels(everything()),
cells_stubhead())
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = list(cells_column_labels(),
cells_stubhead(),
cells_row_groups(),
cells_body(columns = "Gene_ID"),
cells_stub())
) %>%
tab_style(
style = cell_text(size = px(8)),
locations = list(cells_body(), cells_column_labels(), cells_stub(), cells_stubhead(), cells_row_groups())
) %>%
tab_options(
table.margin.right = px(20) # Adds 20px of space to the right side
)
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1 = data_color(table_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
colfunc = colorRampPalette(c("darkblue","#5c6cfa", "#d5d7ed", "white", "#f5bd73", "#f5a573", "red"))
table_1_1 = data_color(table_1_1,
columns = everything(),
rows = everything(),
method = c("bin"),
bins = c(-5, -2, -1.5,-1, -0.9, -0.8,-0.7, -0.6, -0.5, -0.4, -0.3, -0.20, 0.20, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 5),
palette = colfunc(23),
domain = c(-5, 5))
my_tables = list(table_1, table_1_1)
gt_two_column_layout(my_tables)
gt_two_column_layout(my_tables, output = "save",
filename = "basic-two-col2.png", vwidth = 670, vheight = 620)
# colfunc = colorRampPalette(c("#5c6cfa","#d5d7ed", "#f5bd73", "#f5a573" ))
# table_1_2 = data_color(table_1,
#   columns = everything(),
#   rows = everything(),
#   method = c("numeric"),
#   bins = 4,
#   quantiles = 20,
#   direction = "row",
#   palette = colfunc(4))
#gtsave(table_1_2, "table_1_2.html")
knitr::opts_chunk$set(echo = TRUE)
library("ComplexUpset")
library("ggpubr")
library("stringr")
library("r2r")
library("gt")
library("gtExtras")
library("ComplexUpset")
library("tibble")
library("tidyr")
upset_plot_reorder = function(data_list, line_treatment, line_treatment_list){
for (gene_id in data_list$target) {
for (lines in line_treatment) {
if(lines %in% data_list[data_list$target == gene_id, "contrast"]){
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],1)
}else{
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],0)
}
}
}
return(line_treatment_list)
}
outersect <- function(x, y) {
sort(c(setdiff(x, y),
setdiff(y, x)))
}
knitr::opts_chunk$set(echo = TRUE)
library("ComplexUpset")
library("ggpubr")
library("stringr")
library("r2r")
library("gt")
library("gtExtras")
library("ComplexUpset")
library("tibble")
library("tidyr")
upset_plot_reorder = function(data_list, line_treatment, line_treatment_list){
for (gene_id in data_list$target) {
for (lines in line_treatment) {
if(lines %in% data_list[data_list$target == gene_id, "contrast"]){
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],1)
}else{
line_treatment_list[[lines]] = append(line_treatment_list[[lines]],0)
}
}
}
return(line_treatment_list)
}
outersect <- function(x, y) {
sort(c(setdiff(x, y),
setdiff(y, x)))
}
cluster_01 = read.csv2(file = "./Data/GO for clusters/cluster1_gProfiler_athaliana_11-12-2023_8-16-10 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_03 = read.csv2(file = "./Data/GO for clusters/cluster3_gProfiler_athaliana_11-12-2023_8-04-39 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_06 = read.csv2(file = "./Data/GO for clusters/cluster6_gProfiler_athaliana_11-12-2023_8-17-16 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_09 = read.csv2(file = "./Data/GO for clusters/cluster9_gProfiler_athaliana_11-12-2023_8-44-49 PM__intersections.csv", sep = ",", dec = ".",
header = TRUE)
cluster_1_terms = c("membrane", "transmembrane transporter activity", "lipase activity", "regulation of biological process",
"response to hormone", "positive regulation of cellular process", "response to stress", "signal transduction",
"cellular response to chemical stimulus", "auxin-activated signaling pathway", "response to abscisic acid",
"oligosaccharide metabolic process", "sucrose metabolic process", "inositol metabolic process", "response to stimulus")
cluster_3_terms = c("plant-type vacuole", "DNA-binding transcription factor activity", "transporter activity", "MAP kinase activity",
"nucleic acid metabolic process", "response to stress", "response to endogenous stimulus","protein ubiquitination",
"rhythmic process", "regulation of carbohydrate biosynthetic process", "regulation of plant organ morphogenesis",
"regulation of defense response to bacterium", "trehalose metabolism in response to stress", "cellular response to blue light",
"negative regulation of hormone metabolic process")
cluster_6_terms = c("plasma membrane","NAD(P)H dehydrogenase complex (plastoquinone)", "DNA-binding transcription factor activity",
"monooxygenase activity", "regulation of cellular process", "regulation of metabolic process", "aromatic compound biosynthetic process", "response to auxin", "chloroplast organization", "response to gibberellin", "response to blue light", "photomorphogenesis", "fucose metabolic process", "chloroplast RNA modification", "UDP-xylose transmembrane transport")
cluster_9_terms = c("chloroplast", "plasma membrane", "photosystem II", "catalytic activity", "electron transporter, transferring electrons within the cyclic electron transport pathway of photosynthesis activity", "cellular process", "metabolic process", "photosynthesis", "leaf development", "carbohydrate catabolic process", "polysaccharide catabolic process", "chlorophyll metabolic process", "plastid localization","carbon fixation", "starch biosynthetic process")
# Filter for selected terms and reorder them
cluster_01 = cluster_01[cluster_01$term_name %in% cluster_1_terms,]
cluster_01$term_name = factor(cluster_01$term_name, levels = cluster_01$term_name[order(cluster_01$negative_log10_of_adjusted_p_value)])
cluster_01$term_ratio = paste(cluster_01$intersection_size, cluster_01$term_size, sep = "/")
# Filter for selected terms and reorder them
cluster_03 = cluster_03[cluster_03$term_name %in% cluster_3_terms,]
cluster_03$term_name = factor(cluster_03$term_name, levels = cluster_03$term_name[order(cluster_03$negative_log10_of_adjusted_p_value)])
cluster_03$term_ratio = paste(cluster_03$intersection_size, cluster_03$term_size, sep = "/")
#cluster_9_terms[!(cluster_9_terms %in% cluster_09$term_name)]
# Filter for selected terms and reorder them
cluster_06 = cluster_06[cluster_06$term_name %in% cluster_6_terms,]
cluster_06$term_name = factor(cluster_06$term_name, levels = cluster_06$term_name[order(cluster_06$negative_log10_of_adjusted_p_value)])
cluster_06$term_ratio = paste(cluster_06$intersection_size, cluster_06$term_size, sep = "/")
# Filter for selected terms and reorder them
cluster_09 = cluster_09[cluster_09$term_name %in% cluster_9_terms,]
cluster_09$term_name[cluster_09$term_name == "electron transporter, transferring electrons within the cyclic electron transport pathway of photosynthesis activity"] = "electron transporter, transferring electrons within cyclic electron transport pathway..."
cluster_09$term_name = factor(cluster_09$term_name, levels = cluster_09$term_name[order(cluster_09$negative_log10_of_adjusted_p_value)])
cluster_09$term_ratio = paste(cluster_09$intersection_size, cluster_09$term_size, sep = "/")
gene_list = read.csv2("./Data/Immune_Pathways/3drnaseq/X2024.08.05.11.24.04.j284/result/Significant DE genes list and statistics.csv", sep = ",", dec = ".", header = TRUE)
gene_list = gene_list[gene_list$contrast %in% c("SETI_WT.E-SETI_WT.mock", "SETI_WT.P-SETI_WT.mock", "SETI_WT.PE-SETI_WT.mock"),]
upregulated = gene_list[gene_list$up.down == "up-regulated", ]
downregulated = gene_list[gene_list$up.down == "down-regulated", ]
line_treatment = c("SETI_WT.E-SETI_WT.mock", "SETI_WT.P-SETI_WT.mock", "SETI_WT.PE-SETI_WT.mock")
line_treatment_list = list("SETI_WT.E-SETI_WT.mock" = NULL, "SETI_WT.P-SETI_WT.mock" =  NULL, "SETI_WT.PE-SETI_WT.mock" =  NULL)
upregulated_list = upset_plot_reorder(upregulated, line_treatment, line_treatment_list)
upset_plot_up = data.frame(genes = upregulated$target, ETI = upregulated_list[["SETI_WT.E-SETI_WT.mock"]], PTI = upregulated_list[["SETI_WT.P-SETI_WT.mock"]], PTI_plus_ETI = upregulated_list[["SETI_WT.PE-SETI_WT.mock"]])
upset_plot_up = upset_plot_up[!duplicated(upset_plot_up$genes),]
upset(upset_plot_up, colnames(upset_plot_up)[1:4])
var.lab3 = c(
"PTI" = "PTI",
"ETI" = "ETI",
"PTI_plus_ETI" = "PTI + ETI")[sort(1:3, decreasing = TRUE)]
vlabeller <- function (variable, value) {
return(var.lab3[value])
}
upset_plot_up = upset_plot_up[,c(1,3,2,4)]
upset_up_plot = upset(upset_plot_up, colnames(upset_plot_up[,c(4,3,2)]), name='Lines', width_ratio=0.1, labeller= vlabeller, sort_sets=FALSE, set_sizes=FALSE, themes=upset_default_themes(text=element_text(size=8))) + ggtitle('Intersection of upregulated DEGs')
# ETI specific genes
#write.csv2(data.frame(Genes = upset_plot_up[upset_plot_up$ETI == 1 & upset_plot_up$PTI == 0 & upset_plot_up$PTI_plus_ETI == 0, "genes"]),
file = "ETI_Specific_Genes.csv")
gene_list = read.csv2("./Data/Immune_Pathways/3drnaseq/X2024.08.05.11.24.04.j284/result/Significant DE genes list and statistics.csv", sep = ",", dec = ".", header = TRUE)
gene_list = gene_list[gene_list$contrast %in% c("SETI_WT.E-SETI_WT.mock", "SETI_WT.P-SETI_WT.mock", "SETI_WT.PE-SETI_WT.mock"),]
upregulated = gene_list[gene_list$up.down == "up-regulated", ]
downregulated = gene_list[gene_list$up.down == "down-regulated", ]
line_treatment = c("SETI_WT.E-SETI_WT.mock", "SETI_WT.P-SETI_WT.mock", "SETI_WT.PE-SETI_WT.mock")
line_treatment_list = list("SETI_WT.E-SETI_WT.mock" = NULL, "SETI_WT.P-SETI_WT.mock" =  NULL, "SETI_WT.PE-SETI_WT.mock" =  NULL)
upregulated_list = upset_plot_reorder(upregulated, line_treatment, line_treatment_list)
upset_plot_up = data.frame(genes = upregulated$target, ETI = upregulated_list[["SETI_WT.E-SETI_WT.mock"]], PTI = upregulated_list[["SETI_WT.P-SETI_WT.mock"]], PTI_plus_ETI = upregulated_list[["SETI_WT.PE-SETI_WT.mock"]])
upset_plot_up = upset_plot_up[!duplicated(upset_plot_up$genes),]
upset(upset_plot_up, colnames(upset_plot_up)[1:4])
var.lab3 = c(
"PTI" = "PTI",
"ETI" = "ETI",
"PTI_plus_ETI" = "PTI + ETI")[sort(1:3, decreasing = TRUE)]
vlabeller <- function (variable, value) {
return(var.lab3[value])
}
upset_plot_up = upset_plot_up[,c(1,3,2,4)]
upset_up_plot = upset(upset_plot_up, colnames(upset_plot_up[,c(4,3,2)]), name='Lines', width_ratio=0.1, labeller= vlabeller, sort_sets=FALSE, set_sizes=FALSE, themes=upset_default_themes(text=element_text(size=8))) + ggtitle('Intersection of upregulated DEGs')
# ETI specific genes
#write.csv2(data.frame(Genes = upset_plot_up[upset_plot_up$ETI == 1 & upset_plot_up$PTI == 0 & upset_plot_up$PTI_plus_ETI == 0, "genes"]),
#           file = "ETI_Specific_Genes.csv")
#write.csv2(data.frame(Genes = upset_plot_up[upset_plot_up$ETI == 0 & upset_plot_up$PTI == 1 & upset_plot_up$PTI_plus_ETI == 0, "genes"]),
#           file = "PTI_Specific_Genes.csv")
#write.csv2(data.frame(Genes = upset_plot_up[upset_plot_up$ETI == 0 & upset_plot_up$PTI == 1 & upset_plot_up$PTI_plus_ETI == 1, "genes"]),
#           file = "PTI_plus_ETIPTI_Specific_Genes.csv")
Genes = length(upset_plot_up[upset_plot_up$ETI == 0 & upset_plot_up$PTI == 0 & upset_plot_up$PTI_plus_ETI == 1, "genes"])
# pdf(file="upset_plot_up.pdf",
#     width = 4,
#   height = 3.25)
# upset_up_plot
# dev.off()
View(gene_list)
ETI = read.csv2("ETI_Specific_Genes.csv")
ETI = read.csv2("Figures_Tables/ETI_Specific_Genes.csv")
PTI = read.csv2("Figures_Tables/PTI_Specific_Genes.csv")
PTI_plus_ETIPTI_Specific = read.csv2("Figures_Tables/PTI_plus_ETIPTI_Specific_Genes.csv")
c(ETI, PTI, PTI_plus_ETIPTI_Specific)
Upset_plot_gene_list = gene_list
